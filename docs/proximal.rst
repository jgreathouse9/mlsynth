Proximal Synthetic Control
==========================

Next, I discuss the proximal SCM method. In synthetic control methods, we oftentimes make the presumption that our outcomes are generated by some latent variable model, :math:`y_{jt} = \delta_t + \lambda_t\mu_j+\epsilon_{jt}`. This data-generating process may include covariates, but the basic idea is that there are a set of common time effects which impact all units the same and unit-specific effects, which interact with the former, which generates the outcomes that we see we see. Abadie and co [ABADIE2010]_ and others ues this linear factor model to justify SCM. They also derive a bias boud for the SCM, which is (with qualifications) unbiased as the the number of pre-treatment periods grows without bound. This, naturally, poses a problem in settings where we have few pre-treatment periods. Additionally, it may not always be possible to obtain good pre-treatment fit, even if we are mathching on the time-variant factors by regressing our treated unit's outcomes upon our donor units. As a result, the Proximal Inference SCM was developed. In the paper, Shi, Li, Miao, Hu, and Tchetgen Tchetgen [ProxSCM]_



   argue that the outcomes of control units are essentially proxies of the latent factors. Rather than directly regressing the outcome on all such proxies, one can split the set of  proxies into two, thus leveraging one set of proxies to assist the construction of a SC defined in terms of the other set of proxies.


In other words, if we agree that the outcomes of the control units are time variant proxies for our control units, we may be able to still employ the outcomes of other control units, repurposing them for matching on the latent time variant factors instead of learning the weights. This page describes, broadly, the three methods they propose, and applies it to an emprical example.

Notations
----------

Formally, let us define the notation. We observe a set of units indexed by :math:`j`, where 
:math:`\mathcal{N} \operatorname*{:=} \{1, 2, \ldots, N\}` is the set of all units, with cardinality 
:math:`N = |\mathcal{N}|`. Let :math:`j = 1` represent the treated unit, and 
:math:`\mathcal{N}_0 \operatorname*{:=} \mathcal{N} \setminus \{1\}` denote the set of control units, 
with cardinality :math:`N_0 = |\mathcal{N}_0|`. The time periods are indexed by :math:`t`, with 
:math:`\mathcal{T}_1 \operatorname*{:=} \{1, 2, \ldots, T_0\}` representing the pre-intervention periods 
and :math:`\mathcal{T}_2 \operatorname*{:=} \{T_0 + 1, \ldots, T\}` representing the post-intervention periods. 
We denote the full time series as :math:`\mathcal{T} \operatorname*{:=} \mathcal{T}_1 \cup \mathcal{T}_2`, 
with :math:`T = |\mathcal{T}|` representing the total number of time periods.

Let :math:`\mathbf{y}_1 \in \mathbb{R}^T` be the vector for the treated unit's outcomes, and 
:math:`\mathbf{Y}_0 \in \mathbb{R}^{T \times N_0}` be the matrix containing the outcomes of the control units. 
Let :math:`\mathbf{P}_t \in \mathbb{R}^{k \times T}` be a matrix of proxy variables that are assumed to be 
correlated with the common factors driving the outcomes of the treated unit. Here, :math:`k` represents the 
number of proxy variables. Let :math:`\mathbf{w} \in \mathbb{R}^{N_0}` represent the vector of weights for the synthetic control.

Shi, Li, Miao, Hu, and Tchetgen Tchetgen [ProxSCM]_ advocate for a GMM approach, defining the estimating function for the proximal synthetic control method as:

.. math::

    U_t(\mathbf{w}) = g(\mathbf{P}_t) \cdot \left( \mathbf{y}_1 - (\mathbf{Y}_0 \mathbf{w})_t \right),

where :math:`g(\mathbf{P}_t)` is a function applied to the proxy variables :math:`\mathbf{P}_t` at time :math:`t`, 
and :math:`\mathbf{y}_1` and :math:`(\mathbf{Y}_0 \mathbf{w})_t` are the observed and predicted outcomes at time 
:math:`t`, respectively. In this setup, the :math:`\mathbf{P}_t` matrix may be comprised of anything we believe to be correlated with the time variant common factors. Per HCW [HCW]_, the outcomes of other donor units is one example of this, or other covariates that are unaffected by the treatment but are correlated with the time latent factors.

The goal is to estimate the weights :math:`\mathbf{w}` by solving a quadratic programming problem which minimizes the moment conditions

.. math::

    \mathbf{w} = \arg\min_{\mathbf{w}} \sum_{t \in \mathcal{T}_1} U_t(\mathbf{w})^\top \Omega^{-1} U_t(\mathbf{w}),

where :math:`\Omega` is the covariance matrix of the estimating function.

Once we have our where, we math estimate the treatment effect like

.. math::

    \tau = \mathbf{y}_1 - \mathbf{Y}_0 \mathbf{w},

where the sample average of this over the post-intervention period is the ATT. To compute inference, we first estimate the variance-covariance matrix of the moment conditions, denoted by 
:math:`\boldsymbol{\Omega}`. This is done using a HAC estimator. 
The matrix :math:`\boldsymbol{\Omega}` is computed as:

.. math::

    \boldsymbol{\Omega} = \frac{1}{T} \sum_{j=-J}^{J} k(j, J) \sum_{t=1}^{T - |j|} \mathbf{g}_t \mathbf{g}_{t+j}^\top,

where :math:`k(j, J)` is the Bartlett kernel, :math:`J` is the bandwidth, and 
:math:`\mathbf{g}_t` is the vector of moment conditions at time :math:`t`. The outer summation runs over all lags 
within the valid range, while the inner summation computes the covariance contribution for each lag.

We now calculate the covariance matrix 
of the parameters as:

.. math::

    \text{Cov} = \mathbf{G}^{-1} \boldsymbol{\Omega} \left(\mathbf{G}^{-1}\right)^\top,

The variance of the ATT estimate :math:`\tau` is then extracted from the covariance matrix as:

.. math::

    \text{Var}(\tau) = \text{Cov}[-1, -1],

where :math:`\text{Cov}[-1, -1]` refers to the bottom-right entry of the covariance matrix. Finally, the standard error 
of :math:`\tau` is computed as:

.. math::

    \text{SE}(\tau) = \sqrt{\frac{\text{Var}(\tau)}{T}}.


Surrogate Approach 
--------------------

We may also employ surrogate variables which capture latent factors that drive outcome. Let :math:`\mathbf{X}_t \in \mathbb{R}^H` represent a vector of observed surrogates for the treated unit, where :math:`H` is the number of surrogate variables. These surrogates are chosen because they are highly predictive of the treatment effects and driven by the same latent factors as the treated unit. The treatment effect is decomposed into two components, 

.. math::

    Y_t(1) - Y_t(0) = \boldsymbol{\rho}_t^\top \boldsymbol{\theta} + \delta_t,

where :math:`\boldsymbol{\rho}_t \in \mathbb{R}^K` is a vector of latent factors driving the causal effect, :math:`\boldsymbol{\theta} \in \mathbb{R}^K` is a vector of factor loadings for the causal effect, and :math:`\delta_t` represents an error term uncorrelated with the latent factors.

The observed surrogates :math:`\mathbf{X}_t` follow a similar factor model,

.. math::

    \mathbf{X}_t^\top = \boldsymbol{\rho}_t^\top \mathbf{\Phi} + \boldsymbol{\epsilon}_{X,t}^\top,

where :math:`\mathbf{\Phi} \in \mathbb{R}^{K \times H}` is a matrix of factor loadings for the surrogates, and :math:`\boldsymbol{\epsilon}_{X,t}` is an error term for the surrogates. In this framework, proxies are introduced for donors and surrogates. Let :math:`\mathbf{P}_{0,t}` represent proxy variables for donor outcomes, assumed to capture latent factors :math:`\boldsymbol{\lambda}_t`, and let :math:`\mathbf{P}_{1,t}` represent proxy variables for surrogates, capturing both donor latent factors :math:`\boldsymbol{\lambda}_t` and surrogate latent factors :math:`\boldsymbol{\rho}_t`.

The identification of this model relies on moment conditions. For the pre-treatment period, we have

.. math::

    \mathbb{E}[Y_t - \mathbf{Y}_0^\top \mathbf{w} \mid \mathbf{P}_{0,t}, t \leq T_0] = 0.

In the post-treatment period,

.. math::

    \mathbb{E}[Y_t - \mathbf{Y}_0^\top \mathbf{w} - \mathbf{X}_t^\top \boldsymbol{\gamma} \mid \mathbf{P}_{0,t}, \mathbf{P}_{1,t}, t > T_0] = 0.

For identification, there must exist weights :math:`\mathbf{w} \in \mathbb{R}^{N}` for donors such that :math:`\mathbf{\Gamma} \mathbf{w} = \boldsymbol{\beta}`, where :math:`\mathbf{\Gamma}` and :math:`\boldsymbol{\beta}` represent factor loadings. Similarly, there must exist weights :math:`\boldsymbol{\gamma} \in \mathbb{R}^H` for surrogates such that :math:`\mathbf{\Phi} \boldsymbol{\gamma} = \boldsymbol{\theta}`.

As above, the weights :math:`\mathbf{w}` and the surrogate coefficients :math:`\boldsymbol{\gamma}` are estimated via GMM. The objective function can be written as:

.. math::

    \arg \min_{\mathbf{w}, \boldsymbol{\gamma}} \sum_{t \in \mathcal{T}_1} \left( \mathbf{U}_t(\mathbf{w}, \boldsymbol{\gamma})^\top \mathbf{\Omega}^{-1} \mathbf{U}_t(\mathbf{w}, \boldsymbol{\gamma}) \right),

where the moment conditions for :math:`\mathbf{U}_t(\mathbf{w}, \boldsymbol{\gamma})` are defined as:

.. math::

    \mathbf{U}_t(\mathbf{w}, \boldsymbol{\gamma}) =
    \begin{cases}
    \mathbf{g}_0(\mathbf{P}_{0,t}) \left( Y_t - \mathbf{Y}_0^\top \mathbf{w} \right) I\{ t \leq T_0 \}, \\
    \mathbf{g}_1(\mathbf{P}_{0,t}, \mathbf{P}_{1,t}) \left( Y_t - \mathbf{Y}_0^\top \mathbf{w} - \mathbf{X}_t^\top \boldsymbol{\gamma} \right) I\{ t > T_0 \},
    \end{cases}

where :math:`\mathbf{g}_0` and :math:`\mathbf{g}_1` are user-specified functions of the proxies for the donor and surrogate data, and :math:`\mathbf{\Omega}` is a positive-definite weight matrix.

The Average Treatment Effect on the Treated (ATT) is expressed with the surrogates information in mind, as

.. math::

    \tau = \frac{1}{T - T_0} \sum_{t > T_0} \mathbf{X}_t^\top \boldsymbol{\gamma},

where the surrogate coefficients :math:`\boldsymbol{\gamma}` are estimated from the post-treatment period.

.. tip::

   Let's take a breath and understand what's really going on here. If we're interested in the treatment effect for a treated unit, proxies will help capture time specific effects that are common across all units. But what about surrogates? Surrogates are post-intervention metrics we think will be informative of the causal effect that are similar on unit specific latent factors. This means we can even include other units we think are affected by the treatment, or entities that are within the exact same geography (if spillovers are a concern). In standard SCM studies, we would throw out these metrics. But here, we repurpose them. We remove them from the donor pool and use them to adjust our effect size based on their correlation with the treatment effect. 



.. autoclass:: mlsynth.mlsynth.PROXIMAL
   :show-inheritance:
   :special-members: __init__




Estimating Proximal SCM via ``mlsynth``
--------------------------------------------


This is the plot we get when we estimate the causal impact.


.. image:: https://raw.githubusercontent.com/jgreathouse9/mlsynth/refs/heads/main/examples/PROXIMAL/PanicProx.png
   :alt: Proximal Synthetic Control Estimation
   :align: center
   :width: 600px


As we can see, even when we use only post-intervention data to estimate the causal impact, the result largely agrees with the original estimates.
